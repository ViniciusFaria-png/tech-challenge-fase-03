name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  pull-requests: write # This grants the permission to write to PRs
  contents: read 

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      test-success: ${{ steps.test-results.outputs.success }}
      success-rate: ${{ steps.test-results.outputs.success-rate }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install 
        run: npm install

      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Build application
        run: npm run build
      
      - name: Run tests with coverage
        id: run-tests
        run: |
          npm run test:ci > test-output.txt 2>&1 || true
          cat test-output.txt
        continue-on-error: true
      
      - name: Start application in background
        run: |
          npm start &
          echo $! > app.pid
          sleep 10
        
      - name: Test API endpoint
        id: api-test
        run: |
          # Test the /api/test endpoint
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/test || echo "000")
          echo "API response code: $response"
          if [ "$response" = "200" ]; then
            echo "api-success=true" >> $GITHUB_OUTPUT
          else
            echo "api-success=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true
      
      - name: Calculate test results and success rate
        id: test-results
        run: |
          # Parse Jest test results
          if [ -f test-output.txt ]; then
            # Extract test results from Jest output
            passed_tests=$(grep -o "Tests:.*passed" test-output.txt | grep -o "[0-9]\+ passed" | grep -o "[0-9]\+" || echo "0")
            failed_tests=$(grep -o "Tests:.*failed" test-output.txt | grep -o "[0-9]\+ failed" | grep -o "[0-9]\+" || echo "0")
            total_tests=$((passed_tests + failed_tests))
            
            echo "Passed tests: $passed_tests"
            echo "Failed tests: $failed_tests"
            echo "Total tests: $total_tests"
          else
            passed_tests=0
            failed_tests=0
            total_tests=0
          fi
          
          # Add API test result
          api_success="${{ steps.api-test.outputs.api-success }}"
          if [ "$api_success" = "true" ]; then
            passed_tests=$((passed_tests + 1))
          else
            failed_tests=$((failed_tests + 1))
          fi
          total_tests=$((total_tests + 1))
          
          # Calculate success rate
          if [ $total_tests -gt 0 ]; then
            success_rate=$((passed_tests * 100 / total_tests))
          else
            success_rate=0
          fi
          
          echo "Final stats:"
          echo "Passed: $passed_tests"
          echo "Failed: $failed_tests"
          echo "Total: $total_tests"
          echo "Success rate: $success_rate%"
          
          # Set outputs
          echo "success-rate=$success_rate" >> $GITHUB_OUTPUT
          
          # Check if success rate meets minimum requirement (50%)
          if [ $success_rate -ge 50 ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Success rate ($success_rate%) meets minimum requirement (50%)"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "‚ùå Success rate ($success_rate%) below minimum requirement (50%)"
            exit 1
          fi
      
      - name: Stop application
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
            rm app.pid
          fi
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-output.txt

  quality-gate:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    steps:
      - name: Check quality gate
        run: |
          if [ "${{ needs.test.outputs.test-success }}" = "true" ]; then
            echo "üéâ Quality gate passed! Success rate: ${{ needs.test.outputs.success-rate }}%"
            echo "The build meets the minimum 50% success rate requirement."
          else
            echo "üí• Quality gate failed! Success rate: ${{ needs.test.outputs.success-rate }}%"
            echo "The build does not meet the minimum 50% success rate requirement."
            exit 1
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: [test, quality-gate]
    if: github.ref == 'refs/heads/main' && needs.test.outputs.test-success == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Build for production
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_TEAM_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          github-comment: false
      
      - name: Deployment success
        run: |
          echo "üöÄ Application deployed to Vercel successfully!"
          echo "Docker image was used for containerized deployment"
          echo "Success rate was: ${{ needs.test.outputs.success-rate }}%"